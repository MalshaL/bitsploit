{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/components/postlist.js","webpack:///./src/templates/homepage.js","webpack:///./src/components/sidebar.js"],"names":["Pagination","currentPage","pageCount","className","title","to","PostList","posts","pageContext","filter","post","node","frontmatter","length","map","key","id","path","src","image","alt","date","tags","tag","excerpt","postListQuery","PostListPage","data","allMarkdownRemark","edges","Sidebar","useStaticQuery","allTags","forEach","concat","arr","uniqueTags","Set","postPath"],"mappings":"qKAIaA,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,UAAf,OACtB,yBAAKC,UAAU,cACM,IAAhBF,EACO,kBAAC,OAAD,CAAME,UAAU,YACZC,MAAM,sBACNC,GAAE,KAFN,iBAKRJ,EAAc,EACN,kBAAC,OAAD,CAAME,UAAU,YACZC,MAAM,sBACNC,GAAE,KAAMJ,EAAc,IAF1B,iBAKJ,+BACHC,EAAY,EACT,uBAAGC,UAAU,aAAb,QAA+BF,EAA/B,OAAgDC,GAChD,+BACHD,EAAcC,EACP,kBAAC,OAAD,CAAMC,UAAU,YACZC,MAAM,kBACNC,GAAE,KAAMJ,EAAc,IAF1B,iBAKJ,iCCxBG,SAASK,EAAT,GAAyC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YACrC,OACI,yBAAKL,UAAU,qBACX,yBAAKA,UAAU,YACVI,EACIE,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYR,MAAMS,OAAS,KACpDC,KAAI,YAAqB,IAAZJ,EAAW,EAAjBC,KACJ,OACI,yBAAKR,UAAU,cAAcY,IAAKL,EAAKM,IACnC,kBAAC,OAAD,CAAMX,GAAIK,EAAKE,YAAYK,MACvB,yBAAKd,UAAU,uBACX,yBAAKA,UAAU,mBAAmBe,IAAKR,EAAKE,YAAYO,MAAOC,IAAI,MAEvE,yBAAKjB,UAAU,sBACX,kBAAC,OAAD,CAAME,GAAIK,EAAKE,YAAYK,KACrBd,UAAW,oBAAqBO,EAAKE,YAAYR,OACvD,uBAAGD,UAAW,mBAAoBO,EAAKE,YAAYS,MAClDX,EAAKE,YAAYU,KAAKR,KAAI,SAAAS,GAAG,OAC1B,yBAAKpB,UAAW,iBAAkBY,IAAKQ,GAAMA,MAEjD,uBAAGpB,UAAU,sBAAsBO,EAAKE,YAAYY,gBAKhF,kBAAC,EAAD,CACItB,UAAWM,EAAYN,UACvBD,YAAaO,EAAYP,iB,kCC/BzC,8HAuBawB,EAAa,aAwBXC,UAvCM,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAMnB,EAAiB,EAAjBA,YACVD,EAAUoB,EAAKC,kBAAtBC,MACR,OACI,kBAAC,IAAD,KACI,yBAAK1B,UAAU,iBACX,kBAAC,IAAD,CACII,MAAOA,EACPC,YAAaA,IACjB,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAKJ,MAAM,a,iICdR,SAAS0B,IACpB,IAAMH,EAAOI,yBAAe,cAaxBC,EAAU,GACdL,EAAKC,kBAAkBC,MAAMI,SAAQ,YAAe,IAAZtB,EAAW,EAAXA,KACpCqB,EAAUA,EAAQE,OAAOvB,EAAKC,YAAYU,SAE9C,IAAqBa,EAAQ,EAGvBC,GAHeD,EAGUH,EAFpB,YAAI,IAAIK,KAAI,MAAGH,OAAH,oBAAaC,OAGpC,OACI,yBAAKhC,UAAU,WACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACVe,IAAI,wGACJE,IAAI,YAEb,uBAAGjB,UAAW,iBAAd,mBACA,uBAAGA,UAAW,kBAAd,uGAEA,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,YACX,uBAAGA,UAAW,kBAAd,aACCiC,EAAWtB,KAAI,SAAAS,GACZ,IAAMe,EAAW,SAASf,EAC1B,OACI,yBAAKpB,UAAW,iBAAkBY,IAAKQ,GACnC,kBAAC,OAAD,CAAMlB,GAAIiC,EAAUnC,UAAW,sBAAuBoB","file":"component---src-templates-homepage-js-05403372b643d51c58b2.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"gatsby\";\n\n\nexport const Pagination = ({currentPage, pageCount}) => (\n    <nav className=\"pagination\">\n        {currentPage === 2 ? (\n                <Link className=\"pageItem1\"\n                    title=\"Go to previous page\"\n                    to={`/`}>\n                    ← Newer posts\n                </Link>) :\n        currentPage > 2 ? (\n                <Link className=\"pageItem1\"\n                    title=\"Go to previous page\"\n                    to={`/${currentPage - 1}`}>\n                    ← Newer posts\n                </Link>) :\n            <span />}\n        {pageCount > 1 ? (\n            <p className=\"pageItem2\">Page {currentPage} of {pageCount}</p>\n        ) : <span />}\n        {currentPage < pageCount ? (\n                <Link className=\"pageItem3\"\n                    title=\"Go to next page\"\n                    to={`/${currentPage + 1}`}>\n                    Older posts →\n                </Link>) :\n            <span />}\n    </nav>\n);","import {Link} from \"gatsby\"\nimport React from \"react\"\nimport {Pagination} from \"./pagination\";\n\nexport default function PostList({posts, pageContext}) {\n    return (\n        <div className=\"postListContainer\">\n            <div className=\"postList\">\n                {posts\n                    .filter(post => post.node.frontmatter.title.length > 0)\n                    .map(({ node: post }) => {\n                        return (\n                            <div className=\"postPreview\" key={post.id}>\n                                <Link to={post.frontmatter.path}>\n                                    <div className=\"postPreviewImageDiv\">\n                                        <img className=\"postPreviewImage\" src={post.frontmatter.image} alt=\"\"/>\n                                    </div>\n                                    <div className=\"postPreviewContent\">\n                                        <Link to={post.frontmatter.path}\n                                              className={'postPreviewTitle'}>{post.frontmatter.title}</Link>\n                                        <p className={'postPreviewDate'}>{post.frontmatter.date}</p>\n                                        {post.frontmatter.tags.map(tag => (\n                                            <div className={'postPreviewTag'} key={tag}>{tag}</div>\n                                        ))}\n                                        <p className=\"postPreviewExcerpt\">{post.frontmatter.excerpt}</p>\n                                    </div></Link>\n                            </div>\n                        )})}\n            </div>\n            <Pagination\n                pageCount={pageContext.pageCount}\n                currentPage={pageContext.currentPage}>\n            </Pagination>\n        </div>\n    )\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar\";\nimport PostList from \"../components/postlist\";\n\n\nconst PostListPage = ({data, pageContext}) => {\n    const { edges: posts } = data.allMarkdownRemark\n    return (\n        <Layout>\n            <div className=\"gridContainer\">\n                <PostList\n                    posts={posts}\n                    pageContext={pageContext}/>\n                <Sidebar/>\n            </div>\n            <SEO title=\"Posts\" />\n        </Layout>\n    )\n}\n\nexport const postListQuery = graphql`\n  query ($skip: Int, $limit: Int){\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            image\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PostListPage\n","import {graphql, Link, useStaticQuery} from \"gatsby\"\nimport React from \"react\"\nimport {SocialIcons} from \"./social-icons\";\n\nexport default function Sidebar() {\n    const data = useStaticQuery(graphql`\n      query {\n        allMarkdownRemark {\n          edges {\n            node {\n              frontmatter {\n                tags\n              }\n            }\n          }\n        }\n      }\n    `)\n    let allTags = [];\n    data.allMarkdownRemark.edges.forEach(({ node }) => {\n        allTags = allTags.concat(node.frontmatter.tags)\n    })\n    const mergeDedupe = (arr) => {\n        return [...new Set([].concat(...arr))];\n    }\n    const uniqueTags = mergeDedupe(allTags)\n    return (\n        <div className=\"sidebar\">\n            <div className=\"aboutSidebar\">\n                <div className=\"authorImageDiv\">\n                    <img className=\"authorImage\"\n                         src=\"https://user-images.githubusercontent.com/10103699/150982674-35b56056-877e-4bc3-b3af-cdd24f2d2fe5.jpg\"\n                         alt=\"author\"/>\n                </div>\n                <p className={'authorHeading'}>Malsha Ranawaka</p>\n                <p className={'sidebarContent'}>Software Engineer and Data Analyst,\n                    creating content that makes learning new concepts easy and fun.</p>\n                <SocialIcons/>\n            </div>\n            <div className=\"tagCloud\">\n                <p className={'sidebarHeading'}>Tag Cloud</p>\n                {uniqueTags.map(tag => {\n                    const postPath = \"/tags/\"+tag\n                    return (\n                        <div className={'postPreviewTag'} key={tag}>\n                            <Link to={postPath} className={'postPreviewTagText'}>{tag}</Link>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\n// export const tagListQuery = graphql`\n//   query {\n//     allMarkdownRemark {\n//       edges {\n//         node {\n//           frontmatter {\n//             tags\n//           }\n//         }\n//       }\n//     }\n//   }\n// `\n"],"sourceRoot":""}